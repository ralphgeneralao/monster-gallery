"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Gets all the child items for a specific parent item id. If the `recursive`
 * argument is enabled, all children of the items will also be returned instead
 * of only the top level items.
 *
 * @param data Either the flattened tree data or a list of all the tree data to
 * iterate over
 * @param parentId The parent id to get children of
 * @param recursive Boolean if the children's children should also be returned
 * @return a list of all the items for a specific parent item id. Note: if the
 * recursive param is enabled, the list will be ordered so that the children of
 * a item will appear before the next item at the same level. So you either need
 * to sort by `parentId` or something else if you want a specific order.
 */
function getChildItems(data, parentId, recursive) {
    if (recursive === void 0) { recursive = false; }
    var items = Array.isArray(data) ? data : Object.values(data);
    return items.reduce(function (list, item) {
        if (parentId !== item.parentId) {
            return list;
        }
        return __spreadArrays(list, [
            item
        ], (recursive ? getChildItems(items, item.itemId, recursive) : []));
    }, []);
}
exports.default = getChildItems;
//# sourceMappingURL=getChildItems.js.map
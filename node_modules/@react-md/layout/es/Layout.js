var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import React from "react";
import { SkipToMainContent } from "@react-md/link";
import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT, } from "./constants";
import LayoutAppBar from "./LayoutAppBar";
import LayoutMain from "./LayoutMain";
import LayoutNavigation from "./LayoutNavigation";
import LayoutProvider from "./LayoutProvider";
/**
 * The layout to use for your app. There are 9 different types of layouts
 * supported out of the box that work for a decent amount of apps out of the
 * box.
 *
 * Note: You will need to ensure that the base `Configuration` component is a
 * parent of this `Layout` component to work since it relies on the
 * `AppSizeContext` for automatically updating the layout based on media
 * queries.
 */
var Layout = function (_a) {
    var _b;
    var _c = _a.id, id = _c === void 0 ? "layout" : _c, propAppBar = _a.appBar, appBarProps = _a.appBarProps, _d = _a.navAfterAppBar, navAfterAppBar = _d === void 0 ? false : _d, children = _a.children, skipProps = _a.skipProps, mainProps = _a.mainProps, _e = _a.phoneLayout, phoneLayout = _e === void 0 ? DEFAULT_PHONE_LAYOUT : _e, _f = _a.tabletLayout, tabletLayout = _f === void 0 ? DEFAULT_TABLET_LAYOUT : _f, _g = _a.landscapeTabletLayout, landscapeTabletLayout = _g === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _g, _h = _a.desktopLayout, desktopLayout = _h === void 0 ? DEFAULT_DESKTOP_LAYOUT : _h, largeDesktopLayout = _a.largeDesktopLayout, customTitle = _a.customTitle, title = _a.title, titleProps = _a.titleProps, navToggle = _a.navToggle, navToggleProps = _a.navToggleProps, propNav = _a.nav, navProps = _a.navProps, navHeader = _a.navHeader, navHeaderProps = _a.navHeaderProps, navHeaderTitle = _a.navHeaderTitle, navHeaderTitleProps = _a.navHeaderTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, treeProps = _a.treeProps;
    var fixedAppBar = (_b = appBarProps === null || appBarProps === void 0 ? void 0 : appBarProps.fixed) !== null && _b !== void 0 ? _b : typeof propAppBar === "undefined";
    var mainId = (mainProps === null || mainProps === void 0 ? void 0 : mainProps.id) || id + "-main";
    var appBar = propAppBar;
    if (typeof appBar === "undefined") {
        appBar = (React.createElement(LayoutAppBar, __assign({}, appBarProps, { customTitle: customTitle, title: title, titleProps: titleProps, navToggle: navToggle, navToggleProps: navToggleProps })));
    }
    var nav = propNav;
    if (typeof nav === "undefined") {
        nav = (React.createElement(LayoutNavigation, __assign({ header: navHeader, headerProps: navHeaderProps, headerTitle: navHeaderTitle, headerTitleProps: navHeaderTitleProps, closeNav: closeNav, closeNavProps: closeNavProps, treeProps: treeProps }, navProps)));
    }
    return (React.createElement(LayoutProvider, { baseId: id, phoneLayout: phoneLayout, tabletLayout: tabletLayout, landscapeTabletLayout: landscapeTabletLayout, desktopLayout: desktopLayout, largeDesktopLayout: largeDesktopLayout },
        React.createElement(SkipToMainContent, __assign({}, skipProps, { mainId: mainId })),
        navAfterAppBar && appBar,
        nav,
        !navAfterAppBar && appBar,
        React.createElement(LayoutMain, __assign({ headerOffset: fixedAppBar }, mainProps, { id: mainId }), children)));
};
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        var phoneLayouts = ["temporary", "temporary-mini"];
        var tabletLayouts = __spreadArrays(phoneLayouts, ["toggleable", "toggleable-mini"]);
        var wideLayouts = __spreadArrays(tabletLayouts, [
            "clipped",
            "floating",
            "full-height",
        ]);
        Layout.propTypes = {
            id: PropTypes.string,
            children: PropTypes.node,
            phoneLayout: PropTypes.oneOf(phoneLayouts),
            tabletLayout: PropTypes.oneOf(tabletLayouts),
            landscapeTabletLayout: PropTypes.oneOf(wideLayouts),
            desktopLayout: PropTypes.oneOf(wideLayouts),
            largeDesktopLayout: PropTypes.oneOf(wideLayouts),
            appBar: PropTypes.node,
            appBarProps: PropTypes.object,
            navAfterAppBar: PropTypes.bool,
            customTitle: PropTypes.node,
            title: PropTypes.node,
            titleProps: PropTypes.object,
            navToggle: PropTypes.node,
            navToggleProps: PropTypes.object,
            skipProps: PropTypes.object,
            nav: PropTypes.node,
            navProps: PropTypes.object,
            navHeader: PropTypes.node,
            navHeaderProps: PropTypes.object,
            navHeaderTitle: PropTypes.node,
            navHeaderTitleProps: PropTypes.object,
            closeNav: PropTypes.node,
            closeNavProps: PropTypes.object,
            treeProps: PropTypes.object,
            mainProps: PropTypes.object,
        };
    }
    catch (error) { }
}
export default Layout;
//# sourceMappingURL=Layout.js.map
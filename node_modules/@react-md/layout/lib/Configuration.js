"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var dialog_1 = require("@react-md/dialog");
var icon_1 = require("@react-md/icon");
var form_1 = require("@react-md/form");
var states_1 = require("@react-md/states");
var tooltip_1 = require("@react-md/tooltip");
var utils_1 = require("@react-md/utils");
/**
 * This component allows you to quickly configure different functionality within
 * `react-md` in one place with reasonable defaults.
 */
var Configuration = function (_a) {
    var onAppResize = _a.onAppResize, children = _a.children, icons = _a.icons, formTheme = _a.formTheme, _b = _a.phoneMaxWidth, phoneMaxWidth = _b === void 0 ? utils_1.DEFAULT_PHONE_MAX_WIDTH : _b, _c = _a.tabletMinWidth, tabletMinWidth = _c === void 0 ? utils_1.DEFAULT_TABLET_MIN_WIDTH : _c, _d = _a.tabletMaxWidth, tabletMaxWidth = _d === void 0 ? utils_1.DEFAULT_TABLET_MAX_WIDTH : _d, _e = _a.desktopMinWidth, desktopMinWidth = _e === void 0 ? utils_1.DEFAULT_DESKTOP_MIN_WIDTH : _e, _f = _a.desktopLargeMinWidth, desktopLargeMinWidth = _f === void 0 ? utils_1.DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f, _g = _a.defaultSize, defaultSize = _g === void 0 ? utils_1.DEFAULT_APP_SIZE : _g, _h = _a.rippleTimeout, rippleTimeout = _h === void 0 ? states_1.DEFAULT_RIPPLE_TIMEOUT : _h, _j = _a.rippleClassNames, rippleClassNames = _j === void 0 ? states_1.DEFAULT_RIPPLE_CLASSNAMES : _j, _k = _a.disableRipple, disableRipple = _k === void 0 ? false : _k, _l = _a.disableProgrammaticRipple, disableProgrammaticRipple = _l === void 0 ? false : _l, _m = _a.disableTooltipHoverMode, disableTooltipHoverMode = _m === void 0 ? false : _m, _o = _a.tooltipDefaultDelay, tooltipDefaultDelay = _o === void 0 ? tooltip_1.DEFAULT_TOOLTIP_DELAY : _o, _p = _a.tooltipDelayTimeout, tooltipDelayTimeout = _p === void 0 ? tooltip_1.DEFAULT_TOOLTIP_DELAY : _p;
    return (react_1.default.createElement(utils_1.AppSizeListener, { defaultSize: defaultSize, onChange: onAppResize, phoneMaxWidth: phoneMaxWidth, tabletMinWidth: tabletMinWidth, tabletMaxWidth: tabletMaxWidth, desktopMinWidth: desktopMinWidth, desktopLargeMinWidth: desktopLargeMinWidth },
        react_1.default.createElement(dialog_1.NestedDialogContextProvider, null,
            react_1.default.createElement(utils_1.InteractionModeListener, null,
                react_1.default.createElement(states_1.StatesConfig, { disableRipple: disableRipple, disableProgrammaticRipple: disableProgrammaticRipple, rippleTimeout: rippleTimeout, rippleClassNames: rippleClassNames },
                    react_1.default.createElement(tooltip_1.TooltipHoverModeConfig, { enabled: !disableTooltipHoverMode, defaultDelay: tooltipDefaultDelay, delayTimeout: tooltipDelayTimeout },
                        react_1.default.createElement(icon_1.IconProvider, __assign({}, icons),
                            react_1.default.createElement(form_1.FormThemeProvider, __assign({}, formTheme), children))))))));
};
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        var querySize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
        Configuration.propTypes = {
            children: PropTypes.node.isRequired,
            onAppResize: PropTypes.func,
            phoneMaxWidth: querySize,
            tabletMinWidth: querySize,
            tabletMaxWidth: querySize,
            desktopMinWidth: querySize,
            desktopLargeMinWidth: querySize,
            defaultSize: PropTypes.shape({
                isPhone: PropTypes.bool.isRequired,
                isTablet: PropTypes.bool.isRequired,
                isDesktop: PropTypes.bool.isRequired,
                isLargeDesktop: PropTypes.bool.isRequired,
                isLandscape: PropTypes.bool.isRequired,
            }),
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                }),
            ]),
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            tooltipDelayTimeout: PropTypes.number,
            tooltipDefaultDelay: PropTypes.number,
            disableTooltipHoverMode: PropTypes.bool,
            icons: PropTypes.shape({
                back: PropTypes.node,
                checkbox: PropTypes.node,
                expander: PropTypes.node,
                dropdown: PropTypes.node,
                download: PropTypes.node,
                forward: PropTypes.node,
                menu: PropTypes.node,
                radio: PropTypes.node,
                password: PropTypes.node,
                notification: PropTypes.node,
                sort: PropTypes.node,
            }),
            formTheme: PropTypes.shape({
                theme: PropTypes.oneOf(["none", "underline", "outline", "filled"]),
                underlineDirection: PropTypes.oneOf(["left", "center", "right"]),
            }),
        };
    }
    catch (e) { }
}
exports.default = Configuration;
//# sourceMappingURL=Configuration.js.map
"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var tree_1 = require("@react-md/tree");
var defaultNavigationItemRenderer_1 = __importDefault(require("./defaultNavigationItemRenderer"));
var LayoutProvider_1 = require("./LayoutProvider");
var utils_1 = require("./utils");
/**
 * Renders the navigation tree for the Layout component that adds some
 * reasonable defaults to work with navigation items.
 */
var LayoutTree = react_1.forwardRef(function LayoutTree(_a, ref) {
    var propId = _a.id, ariaLabelledBy = _a["aria-labelledby"], _b = _a["aria-label"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : "Navigation" : _b, className = _a.className, navStyle = _a.navStyle, navClassName = _a.navClassName, navItems = _a.navItems, _c = _a.labelKey, labelKey = _c === void 0 ? "children" : _c, _d = _a.valueKey, valueKey = _d === void 0 ? "children" : _d, _e = _a.itemRenderer, itemRenderer = _e === void 0 ? defaultNavigationItemRenderer_1.default : _e, selectedIds = _a.selectedIds, _f = _a.disableTemporaryAutoclose, disableTemporaryAutoclose = _f === void 0 ? false : _f, props = __rest(_a, ["id", "aria-labelledby", "aria-label", "className", "navStyle", "navClassName", "navItems", "labelKey", "valueKey", "itemRenderer", "selectedIds", "disableTemporaryAutoclose"]);
    var _g = LayoutProvider_1.useLayoutConfig(), baseId = _g.baseId, layout = _g.layout, hideNav = _g.hideNav, visible = _g.visible;
    var selectedId = selectedIds[0];
    var lastSelectedId = react_1.useRef(selectedId);
    var isTemporary = utils_1.isTemporaryLayout(layout);
    var id = propId !== null && propId !== void 0 ? propId : baseId + "-navigation-tree";
    react_1.useEffect(function () {
        if (disableTemporaryAutoclose ||
            !isTemporary ||
            !visible ||
            lastSelectedId.current === selectedId) {
            // need to update the lastSelectedId since the selectedId might've changed
            // by a route change OUTSIDE of the navigation drawer. if it isn't
            // updated, it'll automatically close the next time it is opened.
            lastSelectedId.current = selectedId;
            return;
        }
        lastSelectedId.current = selectedId;
        hideNav();
    }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);
    return (react_1.default.createElement("nav", { id: id + "-nav", style: navStyle, className: classnames_1.default("rmd-layout-nav", navClassName) },
        react_1.default.createElement(tree_1.Tree, __assign({}, props, { id: id, ref: ref, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, data: navItems, labelKey: labelKey, valueKey: valueKey, selectedIds: selectedIds, itemRenderer: itemRenderer, className: classnames_1.default("rmd-layout-tree", className) }))));
});
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LayoutTree.propTypes = {
            id: PropTypes.string,
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            className: PropTypes.string,
            navStyle: PropTypes.object,
            navClassName: PropTypes.string,
            children: PropTypes.node,
            labelKey: PropTypes.string,
            valueKey: PropTypes.string,
            navItems: PropTypes.object.isRequired,
            selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,
            itemRenderer: PropTypes.func,
            disableTemporaryAutoclose: PropTypes.bool,
        };
    }
    catch (error) { }
}
exports.default = LayoutTree;
//# sourceMappingURL=LayoutTree.js.map
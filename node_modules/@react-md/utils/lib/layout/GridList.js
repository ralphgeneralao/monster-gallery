"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CELL_MARGIN_VAR = exports.CELL_SIZE_VAR = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var applyRef_1 = __importDefault(require("../applyRef"));
var bem_1 = __importDefault(require("../bem"));
var useResizeObserver_1 = __importDefault(require("../sizing/useResizeObserver"));
var GridListCell_1 = __importDefault(require("./GridListCell"));
var scrollbarSize_1 = __importDefault(require("./scrollbarSize"));
/**
 * This is the css variable that is used store the current size of each cell.
 */
exports.CELL_SIZE_VAR = "--rmd-cell-size";
/**
 * This is the css variable that is used store the current margin of each cell.
 */
exports.CELL_MARGIN_VAR = "--rmd-cell-margin";
var block = bem_1.default("rmd-grid-list");
var isRenderFunction = function (children) { return typeof children === "function"; };
/**
 * The `GridList` component is a different way to render a list of data where
 * the number of columns is dynamic and based on the max-width for each cell.
 * Instead of setting a percentage width to each cell based on the number of
 * columns, this will dynamically add columns to fill up the remaining space and
 * have each cell grow up to a set max-width. A really good use-case for this is
 * displaying a list of images or thumbnails and allowing the user to see a full
 * screen preview once selected/clicked.
 */
var GridList = react_1.forwardRef(function GridList(_a, forwardedRef) {
    var _b;
    var style = _a.style, className = _a.className, children = _a.children, _c = _a.clone, clone = _c === void 0 ? false : _c, _d = _a.wrapOnly, wrapOnly = _d === void 0 ? false : _d, cellMargin = _a.cellMargin, defaultSize = _a.defaultSize, _e = _a.maxCellSize, maxCellSize = _e === void 0 ? 150 : _e, _f = _a.containerPadding, containerPadding = _f === void 0 ? 16 : _f, _g = _a.disableHeightObserver, disableHeightObserver = _g === void 0 ? false : _g, _h = _a.disableWidthObserver, disableWidthObserver = _h === void 0 ? false : _h, props = __rest(_a, ["style", "className", "children", "clone", "wrapOnly", "cellMargin", "defaultSize", "maxCellSize", "containerPadding", "disableHeightObserver", "disableWidthObserver"]);
    var _j = react_1.useState(defaultSize || { columns: -1, cellWidth: maxCellSize }), gridSize = _j[0], setGridSize = _j[1];
    var ref = react_1.useRef(null);
    var recalculate = react_1.useCallback(function () {
        if (!ref.current) {
            return;
        }
        // need to use rect instead of offsetWidth since we need decimal precision
        // for the width since offsetWidth is basically Math.ceil(width). the
        // calculations for max columns will be off on high-pixel-density monitors
        // or some zoom levels.
        var width = ref.current.getBoundingClientRect().width;
        width -= containerPadding;
        // just need to see if there is a scrollbar visible and subtract that width.
        // don't need decimal precision here since both values will be rounded
        if (ref.current.offsetHeight < ref.current.scrollHeight) {
            width -= scrollbarSize_1.default("width");
        }
        var columns = Math.ceil(width / maxCellSize);
        setGridSize({ cellWidth: width / columns, columns: columns });
    }, [maxCellSize, containerPadding]);
    var refHandler = react_1.useCallback(function (instance) {
        applyRef_1.default(instance, forwardedRef);
        ref.current = instance;
        if (instance) {
            recalculate();
        }
    }, [forwardedRef, recalculate]);
    useResizeObserver_1.default({
        disableHeight: disableHeightObserver,
        disableWidth: disableWidthObserver,
        onResize: recalculate,
        target: ref,
    });
    var mergedStyle = __assign(__assign({}, style), (_b = {}, _b[exports.CELL_SIZE_VAR] = gridSize.cellWidth + "px", _b[exports.CELL_MARGIN_VAR] = cellMargin || undefined, _b));
    var content = null;
    if (isRenderFunction(children)) {
        content = children(gridSize);
    }
    else if (clone || wrapOnly) {
        content = react_1.Children.map(children, function (child) { return child && react_1.default.createElement(GridListCell_1.default, { clone: clone }, child); });
    }
    else {
        content = children;
    }
    return (react_1.default.createElement("div", __assign({}, props, { ref: refHandler, style: mergedStyle, className: classnames_1.default(block(), className) }), content));
});
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        GridList.propTypes = {
            style: PropTypes.object,
            clone: PropTypes.bool,
            wrapOnly: PropTypes.bool,
            className: PropTypes.string,
            children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
            cellMargin: PropTypes.string,
            maxCellSize: PropTypes.number,
            defaultSize: PropTypes.oneOfType([
                PropTypes.shape({
                    columns: PropTypes.number.isRequired,
                    cellWidth: PropTypes.number.isRequired,
                }),
                PropTypes.func,
            ]),
            containerPadding: PropTypes.number,
            disableHeightObserver: PropTypes.bool,
            disableWidthObserver: PropTypes.bool,
        };
    }
    catch (e) { }
}
exports.default = GridList;
//# sourceMappingURL=GridList.js.map
import React, { ElementType, AnchorHTMLAttributes } from "react";
export interface LinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {
    /**
     * An optional component to render as. This should really only be used if you
     * are using a router library like
     * [react-router](https://github.com/ReactTraining/react-router) or
     * [@reach/router](https://github.com/reach/router). This will call
     * `createElement` with this value and provide all props and class name.
     */
    component?: ElementType;
    /**
     * An optional href to apply to the link. If this value is set to the empty
     * string and the `component` prop is not provided, the link will basically be
     * disabled.
     */
    href?: string;
    /**
     * An optional target for the link to be opened in. It is recommended to keep
     * this undefined in most cases. If this is not `_blank`, `_parent`, `_self`,
     * or `_top`, it should be the frame name that the link should be rendered in
     * if using frames.
     */
    target?: "_blank" | "_parent" | "_self" | "_top" | string;
    /**
     * An optional `rel` to apply to the link. This should be a combination of 1
     * to many of:
     * - "alternate"
     * - "author"
     * - "bookmark"
     * - "external"
     * - "help"
     * - "license"
     * - "next"
     * - "nofollow"
     * - "noreferrer"
     * - "noopener"
     * - "prev"
     * - "search"
     * - "tag"
     *
     * This is really just used to override the default behavior of the
     * `preventMaliciousTarget` prop.
     */
    rel?: string;
    /**
     * Boolean if the link should automatically be updated to apply `rel=noopener
     * noreferrer` when the `target` prop is set to `"_blank"`. This is
     * recommended to have enabled by default, but can be disabled by setting this
     * prop to `false` or specificying a `rel` prop yourself. You can read more
     * about the reason for this
     * [here](https://mathiasbynens.github.io/rel-noopener/).
     */
    preventMaliciousTarget?: boolean;
    /**
     * Boolean if the Link should be positioned with a flexbox and align the items
     * centered. This is disabled by default but can be useful when rendering
     * icons within the link.
     */
    flexCentered?: boolean;
}
export interface LinkWithComponentProps extends LinkProps {
    /**
     * I'm not really sure of a good way to implement this, but when the
     * `component` prop is provided, all valid props from that component should
     * also be allowed.
     */
    [key: string]: any;
    component: ElementType;
}
/**
 * The `Link` component is used to render links within your app with a basic
 * styles applied and some additional "security" built-in if using the
 * `rel="_blank"`. This can be used with a browser routing library like
 * `react-router` or `reach-router` by providing the `Link` as the
 * `linkComponent` prop.
 */
declare const Link: React.ForwardRefExoticComponent<(LinkProps & React.RefAttributes<"symbol" | "object" | HTMLAnchorElement | "meter" | "textarea" | "button" | "style" | "progress" | "text" | "ruby" | "table" | "small" | "sub" | "circle" | "embed" | "pre" | "caption" | "menu" | "menuitem" | "clipPath" | "filter" | "mask" | "marker" | "big" | "link" | "sup" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "canvas" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "main" | "map" | "mark" | "meta" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "q" | "rp" | "rt" | "s" | "samp" | "slot" | "script" | "section" | "select" | "source" | "span" | "strong" | "summary" | "template" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "textPath" | "tspan" | "use" | "view" | React.ComponentClass<any, any> | React.FunctionComponent<any>>) | (LinkWithComponentProps & React.RefAttributes<"symbol" | "object" | HTMLAnchorElement | "meter" | "textarea" | "button" | "style" | "progress" | "text" | "ruby" | "table" | "small" | "sub" | "circle" | "embed" | "pre" | "caption" | "menu" | "menuitem" | "clipPath" | "filter" | "mask" | "marker" | "big" | "link" | "sup" | "a" | "abbr" | "address" | "area" | "article" | "aside" | "audio" | "b" | "base" | "bdi" | "bdo" | "blockquote" | "body" | "br" | "canvas" | "cite" | "code" | "col" | "colgroup" | "data" | "datalist" | "dd" | "del" | "details" | "dfn" | "dialog" | "div" | "dl" | "dt" | "em" | "fieldset" | "figcaption" | "figure" | "footer" | "form" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "head" | "header" | "hgroup" | "hr" | "html" | "i" | "iframe" | "img" | "input" | "ins" | "kbd" | "keygen" | "label" | "legend" | "li" | "main" | "map" | "mark" | "meta" | "nav" | "noindex" | "noscript" | "ol" | "optgroup" | "option" | "output" | "p" | "param" | "picture" | "q" | "rp" | "rt" | "s" | "samp" | "slot" | "script" | "section" | "select" | "source" | "span" | "strong" | "summary" | "template" | "tbody" | "td" | "tfoot" | "th" | "thead" | "time" | "title" | "tr" | "track" | "u" | "ul" | "var" | "video" | "wbr" | "webview" | "svg" | "animate" | "animateMotion" | "animateTransform" | "defs" | "desc" | "ellipse" | "feBlend" | "feColorMatrix" | "feComponentTransfer" | "feComposite" | "feConvolveMatrix" | "feDiffuseLighting" | "feDisplacementMap" | "feDistantLight" | "feDropShadow" | "feFlood" | "feFuncA" | "feFuncB" | "feFuncG" | "feFuncR" | "feGaussianBlur" | "feImage" | "feMerge" | "feMergeNode" | "feMorphology" | "feOffset" | "fePointLight" | "feSpecularLighting" | "feSpotLight" | "feTile" | "feTurbulence" | "foreignObject" | "g" | "image" | "line" | "linearGradient" | "metadata" | "mpath" | "path" | "pattern" | "polygon" | "polyline" | "radialGradient" | "rect" | "stop" | "switch" | "textPath" | "tspan" | "use" | "view" | React.ComponentClass<any, any> | React.FunctionComponent<any>>)>;
export default Link;

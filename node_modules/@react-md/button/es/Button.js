var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable react/button-has-type */
import React, { forwardRef } from "react";
import { useInteractionStates, } from "@react-md/states";
import buttonThemeClassNames from "./buttonThemeClassNames";
import FAB from "./FAB";
/**
 * The `Button` component is a simple wrapper for the `<button>` element that
 * defaults the `type` attribute to `"button"` so that it does not automatically
 * submit forms by default. It also supports multiple themes, rendering as an
 * icon button, or even as a floating action button.
 *
 * The default theme will be a clear text button unless the `floating` prop has
 * been provided where it will render as an icon button by default instead.
 */
var Button = forwardRef(function Button(_a, ref) {
    var _b = _a.type, type = _b === void 0 ? "button" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.floating, floating = _d === void 0 ? null : _d, floatingProps = _a.floatingProps, _e = _a.theme, theme = _e === void 0 ? floating ? "secondary" : "clear" : _e, _f = _a.themeType, themeType = _f === void 0 ? floating ? "contained" : "flat" : _f, _g = _a.buttonType, buttonType = _g === void 0 ? floating ? "icon" : "text" : _g, propClassName = _a.className, children = _a.children, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, propEnablePressedAndRipple = _a.enablePressedAndRipple, props = __rest(_a, ["type", "disabled", "floating", "floatingProps", "theme", "themeType", "buttonType", "className", "children", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName", "enablePressedAndRipple"]);
    var enablePressedAndRipple = typeof propEnablePressedAndRipple === "boolean"
        ? propEnablePressedAndRipple
        : themeType === "contained";
    var _h = useInteractionStates({
        handlers: props,
        className: buttonThemeClassNames({
            theme: theme,
            themeType: themeType,
            buttonType: buttonType,
            disabled: disabled,
            className: propClassName,
        }),
        disabled: disabled,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        rippleClassName: rippleClassName,
        rippleContainerClassName: rippleContainerClassName,
        enablePressedAndRipple: enablePressedAndRipple,
    }), ripples = _h.ripples, className = _h.className, handlers = _h.handlers;
    return (React.createElement(FAB, __assign({ position: floating }, floatingProps),
        React.createElement("button", __assign({}, props, handlers, { ref: ref, type: type, className: className, disabled: disabled }),
            children,
            ripples)));
});
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Button.propTypes = {
            type: PropTypes.oneOf(["button", "reset", "submit"]),
            className: PropTypes.string,
            theme: PropTypes.oneOf([
                "clear",
                "primary",
                "secondary",
                "warning",
                "error",
            ]),
            themeType: PropTypes.oneOf(["flat", "outline", "contained"]),
            buttonType: PropTypes.oneOf(["text", "icon"]),
            disabled: PropTypes.bool,
            children: PropTypes.node,
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            rippleClassName: PropTypes.string,
            rippleContainerClassName: PropTypes.string,
            enablePressedAndRipple: PropTypes.bool,
            floating: PropTypes.oneOf([
                "top-left",
                "top-right",
                "bottom-left",
                "bottom-right",
            ]),
            floatingProps: PropTypes.object,
        };
    }
    catch (e) { }
}
export default Button;
//# sourceMappingURL=Button.js.map
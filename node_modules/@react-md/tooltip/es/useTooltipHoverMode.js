import { createContext, useCallback, useContext, useState } from "react";
import { useRefCache, useTimeout } from "@react-md/utils";
import { DEFAULT_TOOLTIP_DELAY } from "./constants";
/**
 * This is a private hook that is used to cache and update the tooltip delay
 * context state when needed.
 *
 * @param defaultDelay The default delay to use for all tooltips
 * @return the tooltip delay state
 */
export function useTooltipHoverModeState(defaultDelay, delayTimeout) {
    var _a = useState(defaultDelay), delay = _a[0], setDelay = _a[1];
    var delayRef = useRefCache(delay);
    var disable = useCallback(function () {
        if (delayRef.current === 0) {
            setDelay(defaultDelay);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [defaultDelay]);
    var _b = useTimeout(disable, delayTimeout), start = _b[0], stop = _b[1];
    var enable = useCallback(function () {
        stop();
        if (delayRef.current !== 0) {
            setDelay(0);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [stop]);
    return {
        delay: delay,
        enable: enable,
        startDisableTimer: start,
    };
}
/**
 * This keeps track of the current "immediate" delay to use for all child
 * tooltip components.  When the `enable` function is called, this is updated to
 * be `0` so tooltips can appear immediately on hover.
 */
export var HoverModeDelay = createContext(DEFAULT_TOOLTIP_DELAY);
/**
 * Contains the actions to enable or start disabling the immediate mode for
 * tooltips.
 */
export var HoverModeActions = createContext({
    enable: function () { },
    startDisableTimer: function () { },
});
/**
 * Keeps track of if the immediate mode is enabled. This allows for easy
 * configuration of the app by automatically enabling hover mode functionality
 * if the `ImmediateTooltipConfig` is in your app.
 */
export var HoverModeEnabled = createContext(false);
/**
 * This hook returns the current delay timeout. This probably shouldn't be used
 * much outside of this package.
 * @private
 */
export function useTooltipHoverModeDelay() {
    return useContext(HoverModeDelay);
}
/**
 * This hook returns the actions to enable the hover mode as well as start a
 * timer to disable it.
 * @private
 */
export function useTooltipHoverModeActions() {
    return useContext(HoverModeActions);
}
/**
 * @private
 */
export function useTooltipHoverModeEnabled() {
    return useContext(HoverModeEnabled);
}
//# sourceMappingURL=useTooltipHoverMode.js.map
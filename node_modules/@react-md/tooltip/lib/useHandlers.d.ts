import { HTMLAttributes, MutableRefObject } from "react";
import { UserInteractionMode } from "@react-md/utils";
export declare type TooltipInitiated = UserInteractionMode | null;
interface HandlersBaseOptions {
    mode: UserInteractionMode;
    showTooltip: () => void;
    hideTooltip: () => void;
    /**
     * This is _normally_ triggered at when a timeout starts to help determine
     * what the animation position for the tooltip should be. If this isn't set
     * before the animation starts, the tooltip will animate weirdly.
     */
    setEstimatedPosition: (container: HTMLElement) => void;
    /**
     * The type of interaction that initiated the tooltip. When this value is
     * `null`, the tooltip hasn't been initiated yet and _should_ not be visible
     * within the page as well.
     *
     * When this is set to "window", it means that the tooltip was visible when
     * the entire window was blurred. Check out the keyboard `onFocus` comment for
     * more info about this flow.
     */
    initiated: MutableRefObject<TooltipInitiated>;
    /**
     * A small callback that will set the current initiation type for the tooltip.
     */
    setInitiated: (mode: TooltipInitiated) => void;
    /**
     * The amount of delay to wait before showing the tooltip for the mouse and
     * keyboard flows. In the touch flow, this is the amount of time before the
     * tooltip will hide after the user releases their finger from the phone.
     */
    delay: number;
}
declare type MergableMouseHandlers = Pick<HTMLAttributes<HTMLElement>, "onMouseEnter" | "onMouseLeave">;
interface MouseOptions extends MergableMouseHandlers, HandlersBaseOptions {
    disableHoverMode?: boolean;
}
declare type MergableKeyboardHandlers = Pick<HTMLAttributes<HTMLElement>, "onFocus" | "onBlur" | "onKeyDown">;
interface KeyboardOptions extends MergableKeyboardHandlers, HandlersBaseOptions {
}
declare type MergableTouchHandlers = Pick<HTMLAttributes<HTMLElement>, "onTouchStart" | "onTouchMove" | "onContextMenu">;
interface TouchOptions extends MergableTouchHandlers, HandlersBaseOptions {
    visible: boolean;
}
export declare type MergableHandlers = MergableMouseHandlers & MergableKeyboardHandlers & MergableTouchHandlers;
declare type MouseResult = [() => void, React.MouseEventHandler<HTMLElement> | undefined, React.MouseEventHandler<HTMLElement> | undefined];
/**
 * This handles creating and returning the required mouse event listeners to
 * show and hide tooltips as needed. If there were any mouse event listeners
 * passed in, they will be merged with the tooltip logic automatically and
 * memoized.
 */
export declare function useMouseState({ mode, showTooltip, hideTooltip, initiated, setInitiated, delay: propDelay, onMouseEnter, onMouseLeave, setEstimatedPosition, disableHoverMode, }: MouseOptions): MouseResult;
declare type KeyboardResult = [() => void, React.FocusEventHandler<HTMLElement> | undefined, React.FocusEventHandler<HTMLElement> | undefined, React.KeyboardEventHandler<HTMLElement> | undefined];
/**
 * This handles creating and returning the required keyboard event listeners to
 * show and hide tooltips as needed. If there were any keyboard event listeners
 * passed in, they will be merged with the tooltip logic automatically and
 * memoized.
 */
export declare function useKeyboardState({ mode, showTooltip, hideTooltip, delay, initiated, setInitiated, onFocus, onBlur, onKeyDown, setEstimatedPosition, }: KeyboardOptions): KeyboardResult;
declare type TouchResult = [() => void, React.TouchEventHandler<HTMLElement>, React.TouchEventHandler<HTMLElement>, React.MouseEventHandler<HTMLElement> | undefined];
/**
 * This handles creating and returning the required touch event listeners to
 * show and hide tooltips as needed. If there were any touch event listeners
 * passed in, they will be merged with the tooltip logic automatically and
 * memoized.
 *
 * Tooltips on touch devices are a bit different than mouse and keyboard. Since
 * tooltips appear after a long press on mobile and long presses on mobile cause
 * a context menu to appear, no timeouts for showing the tooltip are started
 * after a touchstart event.  The tooltip will only appear after a contextmenu
 * event which has the default behavior prevented so the tooltip appears
 * instead. After the tooltip appears, it will stay visible as long as the user
 * keeps their finger on their phone. Once they remove their finger, the tooltip
 * will be visible for another `x`ms to make it easier to read without their
 * finger in the way and finally hide.
 */
export declare function useTouchState({ mode, visible, showTooltip, hideTooltip, delay, setInitiated, onTouchStart, onTouchMove, onContextMenu, setEstimatedPosition, }: TouchOptions): TouchResult;
export {};

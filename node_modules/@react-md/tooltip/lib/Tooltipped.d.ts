import { CSSProperties, ReactElement, ReactNode } from "react";
import { RenderConditionalPortalProps } from "@react-md/portal";
import { TooltipProps } from "./Tooltip";
import { MergableHandlers } from "./useHandlers";
import { TooltipStateOptions } from "./useTooltipState";
interface TooltippedProvidedProps extends MergableHandlers {
    id: string;
    "aria-describedby"?: string;
    tooltip: ReactNode;
}
export declare type ChildrenRenderer = (props: TooltippedProvidedProps) => ReactElement;
declare type ChildProps = Partial<Omit<TooltippedProvidedProps, "tooltip">>;
declare type ChildElement = ReactElement<ChildProps>;
export interface TooltippedProps extends RenderConditionalPortalProps, Omit<TooltipStateOptions, "defaultPosition">, Partial<Pick<TooltipStateOptions, "defaultPosition">>, Pick<TooltipProps, "dense" | "lineWrap" | "mountOnEnter" | "unmountOnExit"> {
    /**
     * The id for the element that has a tooltip. This is always required since it
     * will be passed down to the `containerProps` in the children renderer
     * function. It is also used to generate a `tooltipId` when there is a
     * tooltip.
     */
    id: string;
    /**
     * The tooltip to display. When this is false-ish, the children renderer will
     * always return `null` for the `tooltip` prop.
     */
    tooltip?: ReactNode;
    /**
     * An optional id for the tooltip. When this is omitted, it will be set as
     * `${id}-tooltip`.
     */
    tooltipId?: string;
    /**
     * An optional additional `aria-describedby` id or ids to merge with the
     * tooltip id. This is really used for things like notifications or when
     * multiple elements describe your tooltipped element.
     */
    "aria-describedby"?: string;
    /**
     * An optional style for the tooltip.
     */
    style?: CSSProperties;
    /**
     * An optional className for the tooltip
     */
    className?: string;
    /**
     * The amount of spacing to use for a non-dense tooltip. This is the distance
     * between the container element and the tooltip.
     */
    spacing?: number | string;
    /**
     * The amount of spacing to use for a dense tooltip. This is the distance
     * between the container element and the tooltip.
     */
    denseSpacing?: number | string;
    /**
     * Since `react-md` provides mixins to automatically apply a dense spec
     * through mixins via mexia queries, the dense spec might be applied in css
     * instead of in JS. This component will actually check the current spacing
     * amount that has been applied when the tooltip becomes visible.
     *
     * If this behavior is not desired, you can enable this prop and it will only
     * use the provided `spacing` or `denseSpacing` props based on the `dense`
     * prop.
     *
     * Note: This will be defaulted to `true` when the `process.env.NODE_ENV ===
     * 'test'` since test environments normally don't have a default
     * `window.getComgetComputedStyle` value that is not `NaN` which will display
     * errors in your tests.
     */
    disableAutoSpacing?: boolean;
    /**
     * Boolean if the auto-swapping behavior should be disabled. When this value
     * is `undefined`, it'll be treated as `true` when the `position` prop is
     * defined, otherwise `false`.
     */
    disableSwapping?: boolean;
    /**
     * This is the viewwidth margin to use in the positioning calculation. This is
     * just used so that the tooltip can be placed with some spacing between the
     * left and right edges of the viewport if desired.
     */
    vwMargin?: number;
    /**
     * This is the viewheight margin to use in the positioning calculation. This
     * is just used so that the tooltip can be placed with some spacing between
     * the top and abottom edges of the viewport if desired.
     */
    vhMargin?: number;
    /**
     * The children for this component should either be a function or a single
     * element. When the children is a single React element, this component will
     * clone in an `id`, `aria-describedby`, and all the event handlers required
     * to show and hide a tooltip relative to that element. This means that you
     * will need to ensure that the child component accepts and passes down the
     * `on*` event handlers to a DOM node as well as the `id` and
     * `aria-describedby` for accessibility. Every component within react-md
     * should do this by default.
     *
     * If the children is a function, the `id`, `aria-describedby`, and event
     * handlers will be provided as well as a new `tooltip` prop so that you have
     * more control over rendering the tooltip.
     *
     * If the tooltip prop was not provided to this component, the
     * `aria-describedby` and the event handlers will be omitted.
     */
    children: ChildElement | ChildrenRenderer;
}
/**
 * The `Tooltipped` component can be used to dynamically add a tooltip to child
 * element by cloning the required event handlers and accessibility props into
 * the child with `React.cloneChild`.
 */
declare function Tooltipped({ id, children, tooltip: tooltipChildren, dense, vhMargin, vwMargin, hoverDelay, focusDelay, touchTimeout, spacing, denseSpacing, position: propPosition, positionThreshold, portal, portalInto, portalIntoId, onMouseEnter, onMouseLeave, onTouchStart, onTouchMove, onContextMenu, onFocus, onKeyDown, onShow, onHide, disableHoverMode, "aria-describedby": describedBy, defaultPosition, disableSwapping, mountOnEnter, unmountOnExit, disableAutoSpacing, ...props }: TooltippedProps): ReactElement;
declare namespace Tooltipped {
    var propTypes: {
        tooltipId: any;
        dense: any;
        spacing: any;
        denseSpacing: any;
        positionThreshold: any;
        disableAutoSpacing: any;
        vwMargin: any;
        vhMargin: any;
        portal: any;
        lineWrap: any;
        focusDelay: any;
        hoverDelay: any;
        touchTimeout: any;
        mountOnEnter: any;
        unmountOnExit: any;
        defaultPosition: any;
    };
}
export default Tooltipped;

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTooltipHoverModeEnabled = exports.useTooltipHoverModeActions = exports.useTooltipHoverModeDelay = exports.HoverModeEnabled = exports.HoverModeActions = exports.HoverModeDelay = exports.useTooltipHoverModeState = void 0;
var react_1 = require("react");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
/**
 * This is a private hook that is used to cache and update the tooltip delay
 * context state when needed.
 *
 * @param defaultDelay The default delay to use for all tooltips
 * @return the tooltip delay state
 */
function useTooltipHoverModeState(defaultDelay, delayTimeout) {
    var _a = react_1.useState(defaultDelay), delay = _a[0], setDelay = _a[1];
    var delayRef = utils_1.useRefCache(delay);
    var disable = react_1.useCallback(function () {
        if (delayRef.current === 0) {
            setDelay(defaultDelay);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [defaultDelay]);
    var _b = utils_1.useTimeout(disable, delayTimeout), start = _b[0], stop = _b[1];
    var enable = react_1.useCallback(function () {
        stop();
        if (delayRef.current !== 0) {
            setDelay(0);
        }
        // disabled since useRefCache
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [stop]);
    return {
        delay: delay,
        enable: enable,
        startDisableTimer: start,
    };
}
exports.useTooltipHoverModeState = useTooltipHoverModeState;
/**
 * This keeps track of the current "immediate" delay to use for all child
 * tooltip components.  When the `enable` function is called, this is updated to
 * be `0` so tooltips can appear immediately on hover.
 */
exports.HoverModeDelay = react_1.createContext(constants_1.DEFAULT_TOOLTIP_DELAY);
/**
 * Contains the actions to enable or start disabling the immediate mode for
 * tooltips.
 */
exports.HoverModeActions = react_1.createContext({
    enable: function () { },
    startDisableTimer: function () { },
});
/**
 * Keeps track of if the immediate mode is enabled. This allows for easy
 * configuration of the app by automatically enabling hover mode functionality
 * if the `ImmediateTooltipConfig` is in your app.
 */
exports.HoverModeEnabled = react_1.createContext(false);
/**
 * This hook returns the current delay timeout. This probably shouldn't be used
 * much outside of this package.
 * @private
 */
function useTooltipHoverModeDelay() {
    return react_1.useContext(exports.HoverModeDelay);
}
exports.useTooltipHoverModeDelay = useTooltipHoverModeDelay;
/**
 * This hook returns the actions to enable the hover mode as well as start a
 * timer to disable it.
 * @private
 */
function useTooltipHoverModeActions() {
    return react_1.useContext(exports.HoverModeActions);
}
exports.useTooltipHoverModeActions = useTooltipHoverModeActions;
/**
 * @private
 */
function useTooltipHoverModeEnabled() {
    return react_1.useContext(exports.HoverModeEnabled);
}
exports.useTooltipHoverModeEnabled = useTooltipHoverModeEnabled;
//# sourceMappingURL=useTooltipHoverMode.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var constants_1 = require("./constants");
var useTooltipHoverMode_1 = require("./useTooltipHoverMode");
/**
 * This component is used so that tooltips can gain the "hover mode"
 * functionality in that once a tooltip has become visible by hover, all other
 * tooltips will become visible immediately until 3 seconds have passed.
 */
function TooltipHoverModeConfig(_a) {
    var _b = _a.defaultDelay, defaultDelay = _b === void 0 ? constants_1.DEFAULT_TOOLTIP_DELAY : _b, _c = _a.delayTimeout, delayTimeout = _c === void 0 ? constants_1.DEFAULT_TOOLTIP_DELAY : _c, _d = _a.enabled, enabled = _d === void 0 ? true : _d, children = _a.children;
    var _e = useTooltipHoverMode_1.useTooltipHoverModeState(defaultDelay, delayTimeout), delay = _e.delay, enable = _e.enable, startDisableTimer = _e.startDisableTimer;
    var actions = react_1.useMemo(function () { return ({
        enable: enable,
        startDisableTimer: startDisableTimer,
    }); }, [enable, startDisableTimer]);
    return (react_1.default.createElement(useTooltipHoverMode_1.HoverModeDelay.Provider, { value: delay },
        react_1.default.createElement(useTooltipHoverMode_1.HoverModeActions.Provider, { value: actions },
            react_1.default.createElement(useTooltipHoverMode_1.HoverModeEnabled.Provider, { value: enabled }, children))));
}
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TooltipHoverModeConfig.propTypes = {
            enabled: PropTypes.bool,
            delayTimeout: PropTypes.number,
            defaultDelay: PropTypes.number,
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
exports.default = TooltipHoverModeConfig;
//# sourceMappingURL=TooltipHoverModeConfig.js.map